#!/usr/bin/env node

const fsExistsSync = require('../lib/fsExistsSync')
const generator = require('../lib/generator')
const download = require('../lib/download')
const logSymbols = require('log-symbols')
const exec = require('child_process').exec
const inquirer = require('inquirer')
const program = require("commander")
const rm = require('rimraf').sync
const chalk = require('chalk')
const glob = require('glob')
const path = require('path')
const ora = require('ora')
const fs = require('fs')

program
    .usage('<project-name>')
    .option('-j, --jump [value]', '跳过初始化项目')
    .parse(process.argv)

let projectName = program.args[0]
let skip = program.jump

if (!projectName) {
    program.help()
    return
}

if (!fsExistsSync(projectName)) {
    fs.mkdirSync(projectName)
} else {
    console.log(logSymbols.error, chalk.red('项目文件夹存在'))
    return
}

download(projectName)
    .then(target => {
        if (skip) return {
            projectName: target,
            projectVersion: '1.0.0',
            projectDescription: `A project named ${target}`
        }

        return inquirer.prompt([
            {
                name: 'projectName',
                message: '项目的名称',
                default: target
            }, {
                name: 'projectVersion',
                message: '项目的版本号',
                default: '1.0.0'
            }, {
                name: 'projectDescription',
                message: '项目的简介',
                default: `A project named ${target}`
            }
        ])
    })
    .then(data => {
        generator(data, projectName, path.join('.', projectName))
    })
    .then(() => {
        console.log(logSymbols.success, chalk.green('创建成功:)'))
        console.log(
            chalk.green(`
            cd ${projectName}
            npm install     (安装依赖)
            npm run dev     (启动dev服务)
            npm run build   (打包项目)
            npm test        (运行测试)
            `
        ))
    })
    .catch(err => {
        rm(projectName)
        console.log(logSymbols.error, chalk.red(`创建失败: ${err}`))
    })